/*-
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2024 JSQLParser
 * %%
 * Dual licensed under GNU LGPL 2.1 or Apache License 2.0
 * #L%
 */
/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
package net.sf.jsqlparser.parser;
import java.lang.reflect.Field;
import java.lang.Integer;
import net.sf.jsqlparser.parser.feature.*;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.analyze.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.alter.sequence.*;
import net.sf.jsqlparser.statement.comment.*;
import net.sf.jsqlparser.statement.create.function.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.procedure.*;
import net.sf.jsqlparser.statement.create.schema.*;
import net.sf.jsqlparser.statement.create.synonym.*;
import net.sf.jsqlparser.statement.create.sequence.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.refresh.*;
import net.sf.jsqlparser.statement.show.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import net.sf.jsqlparser.statement.grant.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7){
   switch (pos)
   {
      case 0:
         if ((active3 & 0x3c000000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 69;
         }
         if ((active6 & 0x400L) != 0L)
            return 36;
         if ((active6 & 0x30080000L) != 0L)
            return 324;
         if ((active2 & 0x4000L) != 0L || (active4 & 0xc0000001fffff7c0L) != 0L || (active5 & 0x5L) != 0L)
         {
            jjmatchedKind = 370;
            return 188;
         }
         if ((active3 & 0xfdfc00L) != 0L)
         {
            jjmatchedKind = 370;
            return 23;
         }
         if ((active5 & 0x20000000000L) != 0L || (active6 & 0x23080400000L) != 0L)
            return 325;
         if ((active3 & 0x3fff000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 16;
         }
         if ((active6 & 0x400000000000L) != 0L)
            return 326;
         if ((active1 & 0x3ffff9cL) != 0L || (active6 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 145;
         }
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 370;
            return 6;
         }
         if ((active4 & 0x3ff0000000000000L) != 0L || (active5 & 0x12L) != 0L || (active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 370;
            return 327;
         }
         if ((active6 & 0x8000000000L) != 0L)
            return 328;
         if ((active6 & 0x60000c00000000L) != 0L)
            return 48;
         if ((active0 & 0x7ffffcL) != 0L || (active1 & 0x7ffffa0000000000L) != 0L || (active2 & 0x3fffffffbff0L) != 0L || (active5 & 0x1003ff7e0L) != 0L || (active6 & 0x3d80000000000000L) != 0L || (active7 & 0x2L) != 0L)
         {
            jjmatchedKind = 370;
            return 52;
         }
         if ((active0 & 0x1bff800000L) != 0L || (active1 & 0x1fffc000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 329;
         }
         if ((active3 & 0xfffffc0000000000L) != 0L || (active4 & 0x3fL) != 0L || (active6 & 0x6000L) != 0L || (active7 & 0x1L) != 0L)
         {
            jjmatchedKind = 370;
            return 323;
         }
         if ((active5 & 0x3fc00000L) != 0L)
         {
            jjmatchedKind = 370;
            return 330;
         }
         if ((active0 & 0xffefffe400000000L) != 0L || (active1 & 0x3L) != 0L || (active5 & 0x800L) != 0L || (active6 & 0x1000L) != 0L)
         {
            jjmatchedKind = 370;
            return 229;
         }
         if ((active2 & 0xffc00000000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 136;
         }
         if ((active6 & 0x40000200000L) != 0L)
            return 331;
         if ((active2 & 0xfb00000000000000L) != 0L || (active3 & 0x3ffL) != 0L)
         {
            jjmatchedKind = 370;
            return 119;
         }
         if ((active5 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 3;
         }
         if ((active4 & 0xffdfe00000000L) != 0L || (active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 370;
            return 255;
         }
         if ((active6 & 0x80000000000L) != 0L)
            return 315;
         return -1;
      case 1:
         if ((active2 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 140;
         }
         if ((active5 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 2;
         }
         if ((active0 & 0xffefffecffe3fffcL) != 0L || (active1 & 0xfffffbffff8fff92L) != 0L || (active2 & 0x10ffffdff0040e7L) != 0L || (active3 & 0xffffffffff988180L) != 0L || (active4 & 0xfffc01dfdffc03ffL) != 0L || (active5 & 0x17ffffff7L) != 0L || (active6 & 0xa000000000000000L) != 0L || (active7 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active1 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 144;
         }
         if ((active4 & 0x3c82000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 275;
         }
         if ((active3 & 0x600000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 22;
         }
         if ((active4 & 0x3f400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 187;
         }
         if ((active2 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active2 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 118;
         }
         if ((active4 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 199;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 228;
         }
         if ((active2 & 0xc0000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 135;
         }
         if ((active4 & 0x40000000000L) != 0L || (active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 254;
         }
         if ((active6 & 0x17000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active0 & 0x13001c0000L) != 0L || (active1 & 0x700000L) != 0L || (active2 & 0xf800000200ffbf10L) != 0L || (active3 & 0x57e7fL) != 0L || (active4 & 0x300000000000L) != 0L || (active6 & 0x1c00000000000000L) != 0L)
            return 52;
         return -1;
      case 2:
         if ((active0 & 0xffeffffeefe39bdcL) != 0L || (active1 & 0xffe1fbffbfe1ff92L) != 0L || (active2 & 0xf1cff7fc7fbffecfL) != 0L || (active3 & 0xfffff7ffff9cc3c7L) != 0L || (active4 & 0xcfffc1dffffcf7cfL) != 0L || (active5 & 0x1603ffff7L) != 0L || (active6 & 0xa000000000000000L) != 0L || (active7 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 52;
         }
         if ((active4 & 0x40000000000L) != 0L || (active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 261;
         }
         if ((active3 & 0x600000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 21;
         }
         if ((active2 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 117;
         }
         if ((active1 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 332;
         }
         if ((active2 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 139;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 227;
         }
         if ((active0 & 0x10106420L) != 0L || (active1 & 0x1e0000400e0000L) != 0L || (active2 & 0x80180000020L) != 0L || (active3 & 0x80000001838L) != 0L || (active4 & 0x3000200000030030L) != 0L || (active5 & 0x9fc00000L) != 0L)
            return 52;
         if ((active4 & 0x82000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 274;
         }
         return -1;
      case 3:
         if ((active2 & 0x200000000000000L) != 0L)
            return 116;
         if ((active4 & 0x40000000000L) != 0L || (active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 3;
            }
            return 260;
         }
         if ((active2 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return 138;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return 226;
         }
         if ((active3 & 0x600000L) != 0L)
            return 20;
         if ((active0 & 0x87b240400000L) != 0L || (active1 & 0xe0000c1980300cL) != 0L || (active2 & 0x14657f100001L) != 0L || (active3 & 0x10000800c180L) != 0L || (active4 & 0x200909c003861428L) != 0L || (active5 & 0x1403f3400L) != 0L || (active6 & 0x2000000000000000L) != 0L)
            return 52;
         if ((active0 & 0xffef784cafa39bdcL) != 0L || (active1 & 0xff1dfbf3a661cf92L) != 0L || (active2 & 0xf1efe39800affeceL) != 0L || (active3 & 0xffffe7fff79c1277L) != 0L || (active4 & 0xcff6c03ffc78e3c7L) != 0L || (active5 & 0x3f00cbf7L) != 0L || (active6 & 0x8000000000000000L) != 0L || (active7 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return 52;
         }
         return -1;
      case 4:
         if ((active0 & 0x5fee1d488ea113dcL) != 0L || (active1 & 0x839909fba661ef94L) != 0L || (active2 & 0xf1e722183cafce4eL) != 0L || (active3 & 0xfefbe25bd7901277L) != 0L || (active4 & 0xcfd6c521f868e3c6L) != 0L || (active5 & 0x3f1c8b35L) != 0L || (active6 & 0x8000000000000000L) != 0L || (active7 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 4;
            }
            return 52;
         }
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 4;
            }
            return 225;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 4;
            }
            return 259;
         }
         if ((active3 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 4;
            }
            return 19;
         }
         if ((active0 & 0xa001600621028800L) != 0L || (active1 & 0x7c04f20000000002L) != 0L || (active2 & 0x18c18000003080L) != 0L || (active3 & 0x10405a4200c0100L) != 0L || (active4 & 0x20001e04100001L) != 0L || (active5 & 0x40c2L) != 0L)
            return 52;
         return -1;
      case 5:
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active3 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 5;
            }
            return 18;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 5;
            }
            return 258;
         }
         if ((active0 & 0x1fc2454806211340L) != 0L || (active1 & 0x318901ea0601e794L) != 0L || (active2 & 0x31a3a0183c2f4e0eL) != 0L || (active3 & 0x36c9e24bd5800077L) != 0L || (active4 & 0xc996c520a068e142L) != 0L || (active5 & 0x1d180b31L) != 0L || (active6 & 0x8000000000000000L) != 0L || (active7 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 5;
            }
            return 52;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 5;
            }
            return 211;
         }
         if ((active0 & 0x402c18008880009cL) != 0L || (active1 & 0x82100811a0600800L) != 0L || (active2 & 0xc044020000808040L) != 0L || (active3 & 0xc832001002101200L) != 0L || (active4 & 0x640001d58000284L) != 0L || (active5 & 0x22048084L) != 0L)
            return 52;
         return -1;
      case 6:
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 6;
            }
            return 257;
         }
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc80450002200200L) != 0L || (active1 & 0x318100c00601a284L) != 0L || (active2 & 0xa320003c2f4802L) != 0L || (active3 & 0xb448e00985c00043L) != 0L || (active4 & 0xc896c11800286142L) != 0L || (active5 & 0x9000831L) != 0L || (active6 & 0x8000000000000000L) != 0L || (active7 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 6;
            }
            return 52;
         }
         if ((active0 & 0x134a104804011140L) != 0L || (active1 & 0x8012a00004510L) != 0L || (active2 & 0x310080180000060cL) != 0L || (active3 & 0x281024250000034L) != 0L || (active4 & 0x1000420a0408000L) != 0L || (active5 & 0x14180300L) != 0L)
            return 52;
         if ((active1 & 0x1L) != 0L)
            return 212;
         return -1;
      case 7:
         if ((active0 & 0xe00440002200200L) != 0L || (active1 & 0x2001000002008280L) != 0L || (active2 & 0x120003c274c02L) != 0L || (active3 & 0x8440e00984000043L) != 0L || (active4 & 0xc010011800004140L) != 0L || (active5 & 0x9100801L) != 0L || (active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 7;
            }
            return 52;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 7;
            }
            return 256;
         }
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80010000000000L) != 0L || (active1 & 0x118000c004012004L) != 0L || (active2 & 0xa2000000080000L) != 0L || (active3 & 0x3008000001c00000L) != 0L || (active4 & 0x886c00000282002L) != 0L || (active5 & 0x30L) != 0L || (active7 & 0x1L) != 0L)
            return 52;
         return -1;
      case 8:
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
            return 265;
         }
         if ((active0 & 0xe00400000200000L) != 0L || (active1 & 0x2000000000008280L) != 0L || (active2 & 0x120003c214402L) != 0L || (active3 & 0x2040a00000000043L) != 0L || (active4 & 0xc000001800000000L) != 0L || (active5 & 0x1100800L) != 0L || (active6 & 0x8000000000000000L) != 0L || (active7 & 0x1L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 8;
            return 52;
         }
         if ((active0 & 0x40002000200L) != 0L || (active1 & 0x1000002000000L) != 0L || (active2 & 0x60800L) != 0L || (active3 & 0x8400400984000000L) != 0L || (active4 & 0x10010000004140L) != 0L || (active5 & 0x8000001L) != 0L)
            return 52;
         return -1;
      case 9:
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc00400000000000L) != 0L || (active1 & 0x8200L) != 0L || (active2 & 0x30210000L) != 0L || (active3 & 0x2040a00000000043L) != 0L || (active4 & 0x1000000000L) != 0L || (active7 & 0x1L) != 0L)
            return 52;
         if ((active0 & 0x200000000200000L) != 0L || (active1 & 0x2000000000000080L) != 0L || (active2 & 0x120000c004402L) != 0L || (active4 & 0xc000000800000000L) != 0L || (active5 & 0x1100800L) != 0L || (active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 9;
            }
            return 52;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 9;
            }
            return 264;
         }
         return -1;
      case 10:
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active6 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 10;
            }
            return 333;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active2 & 0xc000000L) != 0L || (active4 & 0x800000000L) != 0L)
            return 52;
         if ((active0 & 0x200000000200000L) != 0L || (active1 & 0x2000000000000080L) != 0L || (active2 & 0x1200020004402L) != 0L || (active4 & 0xc000000000000000L) != 0L || (active5 & 0x1100800L) != 0L || (active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return 52;
         }
         return -1;
      case 11:
         if ((active0 & 0x200000000200000L) != 0L || (active1 & 0x80L) != 0L || (active2 & 0x28004402L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 11;
            return 52;
         }
         if ((active7 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x2000000000000000L) != 0L || (active2 & 0x1200000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L || (active5 & 0x1000800L) != 0L)
            return 52;
         return -1;
      case 12:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80L) != 0L || (active2 & 0x8000400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 12;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L || (active2 & 0x20004002L) != 0L)
            return 52;
         return -1;
      case 13:
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x80L) != 0L || (active2 & 0x8000000L) != 0L)
            return 52;
         if ((active0 & 0x200000000000000L) != 0L || (active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 13;
            return 52;
         }
         return -1;
      case 14:
         if ((active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 14;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200000000000000L) != 0L)
            return 52;
         return -1;
      case 15:
         if ((active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 15;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 16;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L || (active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 17;
            return 52;
         }
         return -1;
      case 18:
         if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 18;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x400L) != 0L || (active4 & 0x4000000000000000L) != 0L)
            return 52;
         return -1;
      case 19:
         if ((active5 & 0x100000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 19;
            return 52;
         }
         if ((active6 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active5 & 0x100000L) != 0L)
            return 52;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 403;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x30000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x180000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 428);
      case 38:
         jjmatchedKind = 424;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x18000000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 391);
      case 41:
         return jjStopAtPos(0, 392);
      case 42:
         jjmatchedKind = 401;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L, 0x0L);
      case 43:
         return jjStopAtPos(0, 404);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         jjmatchedKind = 418;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x60000800000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 394, 36);
      case 47:
         return jjStartNfaWithStates_0(0, 427, 315);
      case 58:
         jjmatchedKind = 395;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10004000000000L, 0x0L);
      case 60:
         jjmatchedKind = 406;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000L, 0x23080000000L, 0x0L);
      case 61:
         jjmatchedKind = 393;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000L, 0x0L, 0x0L, 0x1000000L, 0x0L);
      case 62:
         jjmatchedKind = 405;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000L, 0x0L);
      case 63:
         jjmatchedKind = 402;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x300000000L, 0x0L);
      case 64:
         jjmatchedKind = 441;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x42000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 430, 326);
      case 93:
         return jjStopAtPos(0, 431);
      case 94:
         return jjStopAtPos(0, 429);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7ffffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1bff800000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffefffe400000000L, 0x3L, 0x0L, 0x0L, 0x0L, 0x800L, 0x1000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffff9cL, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffc000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffa0000000000L, 0x200000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0xfL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffbff0L, 0x0L, 0x0L, 0x0L, 0x1c00000000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c0000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ffc00000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffc00000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfb00000000000000L, 0x3ffL, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfdfc00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fff000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3c000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfffffc0000000000L, 0x3fL, 0x0L, 0x6000L, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L, 0x0L, 0xc0000001fffff7c0L, 0x5L, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xffdfe00000000L, 0x0L, 0x8000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3ff0000000000000L, 0x12L, 0x10000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7e0L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3ff000L, 0x2000000000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3fc00000L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc0000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 446;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xd000000000000L, 0x0L);
      case 124:
         return jjStartNfaWithStates_0(0, 423, 328);
      case 125:
         return jjStopAtPos(0, 433);
      case 126:
         jjmatchedKind = 410;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active6 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 419);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000L, active7, 0L);
      case 38:
         if ((active5 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 359);
         else if ((active5 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 361);
         else if ((active6 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 417);
         break;
      case 42:
         if ((active6 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 408);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 411);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000000L, active7, 0L);
      case 58:
         if ((active6 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 436);
         break;
      case 60:
         if ((active6 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 425);
         break;
      case 61:
         if ((active6 & 0x800000L) != 0L)
            return jjStopAtPos(1, 407);
         else if ((active6 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 422);
         break;
      case 62:
         if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 360);
         else if ((active6 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 414);
         else if ((active6 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 426);
         else if ((active6 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 437;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 439;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x140000000000000L, active7, 0L);
      case 64:
         if ((active6 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 409);
         else if ((active6 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 415);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e400800000L, active1, 0x800040000000000cL, active2, 0x103c00c00000001L, active3, 0xc000f000000L, active4, 0x1e000001c0L, active5, 0x400011e0L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active6 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 432);
         return jjMoveStringLiteralDfa2_0(active0, 0xe0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000L, active1, 0x20000003f10L, active2, 0x20c0031c0000000L, active3, 0xfffbf00010000000L, active4, 0x1800003f400L, active5, 0x80000200L, active6, 0L, active7, 0x1L);
      case 70:
      case 102:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 132, 52);
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1800L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xfc0000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40001c0000L, active5, 0x6000L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0x38000003c000L, active2, 0x3004c000000026L, active3, 0x20000000L, active4, 0x40000e00001L, active5, 0x1f8404L, active6, 0xa000000000008000L, active7, 0x2L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000020000e00L, active1, 0x20080000c000000L, active2, 0x80L, active3, 0x4000040000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10080000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1f400000L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 161, 52);
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7000L, active1, 0x60000000L, active2, 0x3fbe00L, active3, 0x4000L, active4, 0x9f0000000000000L, active5, 0x10L, active6, 0x1c00000000000000L, active7, 0L);
      case 79:
      case 111:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3fee000040000000L, active1, 0x1f000000600000L, active2, 0xf0c03b0001000008L, active3, 0x27fL, active4, 0x20000200003eL, active5, 0x100a00800L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L, active3, 0x808000L, active4, 0x600000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc000000000000000L, active5, 0x1L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 106, 52);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 106, 52);
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000080030000L, active1, 0x3c20000000800000L, active2, 0L, active3, 0xf80040000L, active4, 0x3c82000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 106, 52);
         else if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 106, 52);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x80000000L, active2, 0x3e800000L, active3, 0L, active4, 0x3000000000000000L, active5, 0x20000002L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 52);
         else if ((active6 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 434;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0x1c000000L, active5, 0L, active6, 0x8000000000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800600000L, active1, 0x41c0000003000001L, active2, 0L, active3, 0x3f000180180L, active4, 0x4000020000000L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1ff00000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1200000000L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0x8000180000000L, active5, 0L, active6, 0L, active7, 0L);
      case 124:
         if ((active6 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 416);
         break;
      case 126:
         if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x20000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1c00000000000000L, active7, 0L);
      case 42:
         if ((active6 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 413);
         break;
      case 62:
         if ((active6 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 420);
         else if ((active6 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 421);
         else if ((active6 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 438);
         else if ((active6 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 440);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x9c0000001100L, active1, 0x4400000020000080L, active2, 0x1000000000L, active3, 0x104040000000L, active4, 0x400004100000L, active5, 0L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0x10001e00200000L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x400010000L, active1, 0x380000012L, active2, 0x3000030000000e00L, active3, 0x600000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 52);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 52);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000001000L, active3, 0x40000L, active4, 0x200000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000600000000000L, active1, 0xc04000000L, active2, 0x40000000L, active3, 0x8180608000L, active4, 0x2000004000000400L, active5, 0x6400L, active6, 0L, active7, 0L);
      case 70:
      case 102:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 133, 52);
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x300L, active2, 0x2000000000L, active3, 0x1800000001000L, active4, 0x40L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 171, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200L, active1, 0L, active2, 0x2L, active3, 0xa000000000000L, active4, 0x1L, active5, 0x4L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1010000000L, active2, 0x1000080L, active3, 0x4030600000000L, active4, 0x60082041000000L, active5, 0x20001002L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000004000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 52);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 52);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 52);
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xe002000000000L, active1, 0xc1480000000c00L, active2, 0x8000000000000000L, active3, 0x4180L, active4, 0xc080000000000006L, active5, 0x1f0000e1L, active6, 0L, active7, 0x2L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0x1200000L, active2, 0x4008000000000L, active3, 0x10000000000003L, active4, 0x4058002401080L, active5, 0x40000000L, active6, 0x8000L, active7, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1f80000008000000L, active1, 0x100100000000000L, active2, 0x30040000802040L, active3, 0x20040000000000L, active4, 0x80000000L, active5, 0x100008800L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000a0000000L, active1, 0x3a20000000800000L, active2, 0x10003e000000L, active3, 0x800000004L, active4, 0x8040008L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 301, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x6002000000L, active2, 0x8L, active3, 0xc0000000000000L, active4, 0x108000000004000L, active5, 0L, active6, 0L, active7, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000002000L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 343, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000L, active1, 0x1c200000000001L, active2, 0x8000000004000L, active3, 0x2017000000L, active4, 0x10000000L, active5, 0x200300L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 351, 52);
         else if ((active6 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 435);
         return jjMoveStringLiteralDfa3_0(active0, 0x200003c000800004L, active1, 0x801f000L, active2, 0x400008005L, active3, 0x3f00000000000000L, active4, 0x400000120008000L, active5, 0x10L, active6, 0x8000000000000000L, active7, 0x1L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 52);
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1244600818L, active1, 0x3800000000cL, active2, 0x101c008001f0000L, active3, 0xc000000008980030L, active4, 0x20000L, active5, 0x1f0000L, active6, 0x2000000000000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000400000L, active2, 0L, active3, 0L, active4, 0x1800000080000L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 52);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x8000000000000000L, active2, 0x80000000200000L, active3, 0x20000040L, active4, 0x100L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 235, 52);
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0x200L, active4, 0x20L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x202000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 52);
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0x200000000000L, active3, 0L, active4, 0xc002000000000000L, active5, 0x1L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000008020040L, active1, 0x100080204504L, active2, 0x1000010000204000L, active3, 0x20000001000241L, active4, 0x200000000004000L, active5, 0x2000000L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000020400000L, active2, 0x4000000000000L, active3, 0L, active4, 0x4000000000000L, active5, 0x200L, active6, 0x1000000000000000L, active7, 0L);
      case 67:
      case 99:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x604020000000L, active1, 0x10402080000a000L, active2, 0xc00000000000L, active3, 0x109d0000000L, active4, 0L, active5, 0x800L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 236, 52);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 266, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L, active5, 0x4008000L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 52);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 52);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 279, 52);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 281, 52);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 304, 52);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 307, 52);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 352, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x10200800804L, active1, 0x8008100000a00L, active2, 0x40810008000fb000L, active3, 0x1428200020c0000L, active4, 0x400040000000340L, active5, 0L, active6, 0x8000L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x42000000000L, active4, 0x2000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 52);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 52);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 219, 52);
         else if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400210000L, active1, 0L, active2, 0x2L, active3, 0x10L, active4, 0x1L, active5, 0x1e0000L, active6, 0x2000000000000000L, active7, 0L);
      case 73:
      case 105:
         if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 268, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000198L, active1, 0x8000000000000000L, active2, 0x40008000000000L, active3, 0x8000000800002L, active4, 0x900400010400000L, active5, 0x30L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 170, 52);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 341, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000080L, active3, 0x4000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 52);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 350, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000009000L, active1, 0x81006202000012L, active2, 0x600L, active3, 0x80005000000100L, active4, 0x1e00200006L, active5, 0L, active6, 0L, active7, 0x2L);
      case 77:
      case 109:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 52);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 299, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000000L, active1, 0x10000004000000L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 52);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 207, 52);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 294, 52);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 333, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x300180002000000L, active1, 0x400000000000000L, active2, 0x3c000000L, active3, 0x20L, active4, 0x800000000000L, active5, 0x20000006L, active6, 0xc00000000000000L, active7, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 52);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L, active2, 0x8000000000000040L, active3, 0x10000420000000L, active4, 0xb0000080000000L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 52);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 52);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 158, 52);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 172, 52);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 280, 52);
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0x100000L, active4, 0x10020000080L, active5, 0L, active6, 0L, active7, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 317, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x4000010000000001L, active2, 0x800L, active3, 0x1008000400004L, active4, 0xc100000L, active5, 0x4000L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 52);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 261, 52);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 273, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x8c01000000000000L, active1, 0xe01000000000L, active2, 0L, active3, 0x1000L, active4, 0x8000L, active5, 0x9000000L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 52);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 52);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 52);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 52);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 185, 116);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 259, 52);
         else if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 332, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x80000010000L, active2, 0x4L, active3, 0x3200000004000000L, active4, 0x140080000L, active5, 0x10000000L, active6, 0x8000000000000000L, active7, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000L, active1, 0x3800000000000000L, active2, 0x110000000800000L, active3, 0xcc00400000000000L, active4, 0x2000L, active5, 0xc0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x22000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 274, 52);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 330, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x84000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x200000000000L, active4, 0L, active5, 0x100L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0x2000000000000000L, active7, 0x2L);
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x3c000002L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2044000000000L, active1, 0x210012000000010L, active2, 0x22000000000000L, active3, 0x2c0000200000000L, active4, 0L, active5, 0x4000000L, active6, 0xc00000000000000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4004L, active2, 0L, active3, 0L, active4, 0x2L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xb000000000000000L, active3, 0x200000000000L, active4, 0x4002800040000000L, active5, 0x8000001L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0x80000L, active5, 0x20L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 52);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 52);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 52);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 52);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 52);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 52);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 52);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 229, 52);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 52);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 52);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 276, 52);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 334, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x1340000804000000L, active1, 0x80004000001L, active2, 0x4004020000000800L, active3, 0x1000890001000L, active4, 0x800001d28002000L, active5, 0x11000084L, active6, 0L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 321, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80002000000000L, active5, 0x2000010L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 52);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 52);
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000010000L, active1, 0x8004002210000L, active2, 0x1000004008L, active3, 0x5144000210L, active4, 0x208000L, active5, 0x20040100L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 52);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 232, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 52);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 168, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x20400000L, active2, 0xa00000L, active3, 0x1400040L, active4, 0x4400000400080L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L, active1, 0L, active2, 0x80000000000000L, active3, 0xc20000000800000L, active4, 0x200L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 52);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 309, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x144L, active1, 0x8000008000000000L, active2, 0L, active3, 0x2000002L, active4, 0x8000000090000000L, active5, 0L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200008L, active1, 0x1000000008000L, active2, 0x4L, active3, 0L, active4, 0x50000000000L, active5, 0x188200L, active6, 0x1000000000000000L, active7, 0L);
      case 80:
      case 112:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000180000000L, active2, 0x200000000000L, active3, 0L, active4, 0x100L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 52);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 52);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 210, 52);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 52);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 226, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000200L, active1, 0x2280L, active2, 0x1010008000f8040L, active3, 0xf000c00000000000L, active4, 0x400000000004000L, active5, 0L, active6, 0x8000000000000000L, active7, 0x1L);
      case 83:
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 52);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 52);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 180, 52);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000080L, active1, 0L, active2, 0L, active3, 0x8020000000000L, active4, 0L, active5, 0L, active6, 0x8000L, active7, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 52);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 52);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 167, 52);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 52);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 248, 52);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 256, 52);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 282, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x4c00000000000000L, active1, 0x180001000000800L, active2, 0L, active3, 0x10000000000000L, active4, 0x200000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa00000100L, active2, 0x600L, active3, 0x100020L, active4, 0x50000000000004L, active5, 0x800L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000001L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 52);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 52);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 231, 52);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
      return 5;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 52);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 265, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L, active2, 0x100000830000000L, active3, 0x400000000400000L, active4, 0x4002800000404002L, active5, 0x21L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 228, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x300040000000040L, active1, 0x14002000000L, active2, 0L, active3, 0x80020000000000L, active4, 0x40L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 52);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 283, 52);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 322, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x8200000000L, active2, 0x600L, active3, 0x880000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 52);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 52);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 52);
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 52);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 52);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 52);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 52);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 52);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 52);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 244, 52);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 245, 52);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 251, 52);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 263, 52);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 310, 52);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 313, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x100004000000L, active1, 0x80000000000480L, active2, 0x80800000000000L, active3, 0x800000000004L, active4, 0x2000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 71:
      case 103:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 52);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 284, 52);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 345, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L, active3, 0L, active4, 0x80000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 286, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0x8000000L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000200L, active1, 0x1100002000002000L, active2, 0x1000000200000L, active3, 0x3000000000800040L, active4, 0x4400000000000L, active5, 0L, active6, 0x8000000000000000L, active7, 0x1L);
      case 75:
      case 107:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 191, 52);
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 52);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 151, 52);
         else if ((active5 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 349, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4100L, active2, 0x2022000000010000L, active3, 0x200001000020L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 288, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 52);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 52);
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 338, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x48000000000000L, active1, 0x4018001L, active2, 0x1000000008L, active3, 0x8000000050000010L, active4, 0x10000020202000L, active5, 0x110L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc000000L, active3, 0L, active4, 0x8100000000088100L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 80:
      case 112:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 190, 52);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 241, 52);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 258, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L, active2, 0x20002L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 52);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x1c00000800200000L, active1, 0x210L, active2, 0x200000000004L, active3, 0x200000200000000L, active4, 0x10000000000L, active5, 0x1000800L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 52);
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 327, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L, active2, 0x40000L, active3, 0x1400100000000L, active4, 0x800001800000000L, active5, 0x200L, active6, 0L, active7, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 52);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 52);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 52);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 143, 52);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 52);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 52);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 212, 52);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 217, 52);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 314, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x800000000L, active2, 0L, active3, 0x48000004000000L, active4, 0L, active5, 0x4020000L, active6, 0xc00000000008000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000L, active5, 0x180000L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L, active2, 0x80000L, active3, 0x3L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 335, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 52);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 52);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 346, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000000L, active1, 0x2000200L, active2, 0x1000000080000L, active3, 0x40000000000003L, active4, 0x10800000040L, active5, 0L, active6, 0x8000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L, active2, 0xc000000L, active3, 0x400000000000000L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x2000000000010080L, active2, 0L, active3, 0x3000000000000000L, active4, 0x800000000002002L, active5, 0x1L, active6, 0L, active7, 0x1L);
      case 68:
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 52);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 175, 52);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 285, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x40L, active4, 0x10000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 52);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 52);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 52);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 52);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 52);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 52);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 52);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 52);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 52);
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 52);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 189, 52);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 233, 52);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 247, 52);
         else if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 329, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x8000000000L, active2, 0x50c00L, active3, 0x8200001000000L, active4, 0x80000000000000L, active5, 0x8000010L, active6, 0L, active7, 0x2L);
      case 71:
      case 103:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 52);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 52);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 52);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 222, 52);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 328, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 240, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0x1004000000000L, active2, 0x200000000000L, active3, 0x8000400184000000L, active4, 0x100L, active5, 0x1020000L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 163, 52);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 184, 52);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 77:
      case 109:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 52);
         break;
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 52);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 52);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 52);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 271, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000008000L, active2, 0x80000000000000L, active3, 0x800000000000L, active4, 0x4400000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0x1000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 194, 52);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 278, 52);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x30020002L, active3, 0L, active4, 0L, active5, 0x800L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 52);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 52);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 52);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 52);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 212);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 52);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 52);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 220, 52);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 249, 52);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 298, 52);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 312, 52);
         else if ((active5 & 0x80000L) != 0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 348, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x200040000000200L, active1, 0x4000000L, active2, 0L, active3, 0L, active4, 0x800000004000L, active5, 0x100020L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x22000000000000L, active3, 0x800000000L, active4, 0L, active5, 0L, active6, 0x2c00000000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 52);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 225, 52);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 230, 52);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x210000L, active3, 0x40L, active4, 0x1000000000L, active5, 0x1000000L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x40200000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0x800000000000L, active4, 0xc000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 52);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 311, 52);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 324, 52);
         break;
      case 69:
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 52);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 52);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 177, 52);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 181, 52);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 215, 52);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 269, 52);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 303, 52);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 315, 52);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 325, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x8000L, active2, 0x20000L, active3, 0L, active4, 0x10000000000000L, active5, 0x20800L, active6, 0x3000000000000000L, active7, 0L);
      case 71:
      case 103:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 52);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 302, 52);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 306, 52);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00400000000000L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 75:
      case 107:
         if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 257, 52);
         break;
      case 76:
      case 108:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 147, 52);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 216, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L, active2, 0x1000000000000L, active3, 0x400000000000003L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000L, active5, 0x8000000L, active6, 0x8000L, active7, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 52);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 52);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 275, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0x800L, active3, 0x8000000080000000L, active4, 0x100L, active5, 0L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x200000000000L, active3, 0x104000000L, active4, 0x4000L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 243, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x30000000L, active3, 0x800000000L, active4, 0x10000000000L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 52);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 214, 52);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 277, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L, active7, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 52);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 52);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 52);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 52);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 183, 52);
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 305, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L, active2, 0x4000L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 347, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L, active2, 0x30000000L, active3, 0L, active4, 0x8000000000000000L, active5, 0x100000L, active6, 0x1c00000000000000L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8080L, active2, 0L, active3, 0L, active4, 0x1000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 308, 52);
         break;
      case 69:
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 52);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 227, 52);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 238, 52);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 250, 52);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 320, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000000L, active3, 0x2000800000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 71:
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 52);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 52);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 255, 52);
         break;
      case 73:
      case 105:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x200000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0x1000000L, active6, 0L, active7, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 52);
         break;
      case 78:
      case 110:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 218, 52);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 224, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0xc00400000000000L, active1, 0x2000000000000000L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x800L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000L, active5, 0L, active6, 0x8000L, active7, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 52);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 270, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 83:
      case 115:
         if ((active5 & 0x20000L) != 0L)
            return jjStopAtPos(8, 337);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x2L);
      case 84:
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 52);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 145, 52);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 146, 52);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 262, 52);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 264, 52);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x40L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 296, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6, active7);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000000L, active2, 0xc000000L, active3, 0L, active4, 0x8000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 52);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 144, 52);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 149, 52);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 192, 52);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 193, 52);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 198, 52);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 246, 52);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 292, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L, active7, 0x2L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0x800000000L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 78:
      case 110:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 237, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 239, 52);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 52);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 79, 52);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800L, active6, 0x8000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L, active4, active5, active6, active7);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x3c00000000000000L, active7, 0x1L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x20000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 69:
      case 101:
         if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 291, 52);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L, active2, 0x1000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x8000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L, active2, 0x2L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0x800L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4000L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0x2L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 59, 52);
         break;
      case 84:
      case 116:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200008000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 90:
      case 122:
         if ((active6 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 69, 333);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x1000000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4, active5, active6, active7);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8000000L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 176, 52);
         break;
      case 69:
      case 101:
         if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 319, 52);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 344, 52);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x20000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 78:
      case 110:
         if ((active7 & 0x2L) != 0L)
            return jjStopAtPos(11, 449);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 125, 52);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 173, 52);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 331, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4, active5, active6, active7);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 71:
      case 103:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(12, 157, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 21, 52);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 142, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 129, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, 0L, active4, active5, active6, active7);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0x1000000000000000L, active7, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 71:
      case 103:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 155, 52);
         break;
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 71, 52);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2, 0L, active4, active5, active6, active7);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x400L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 69:
      case 101:
         if ((active6 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(14, 444);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 57, 52);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active0 &= old0) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2, 0L, active4, active5, active6, active7);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active2, 0x400L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active4, 0x4000000000000000L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2, 0L, active4, active5, active6, active7);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active2, 0L, active4, 0L, active5, 0x100000L, active6, 0xc00000000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa17_0(active2, 0x400L, active4, 0L, active5, 0L, active6, 0L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, 0L, active4, active5, active6, active7);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active2, 0x400L, active4, 0L, active5, 0L, active6, 0x8000000000000000L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L, active7, 0L);
      case 78:
      case 110:
         if ((active7 & 0x1L) != 0L)
            return jjStopAtPos(17, 448);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa18_0(active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active2, 0L, active4, 0x4000000000000000L, active5, 0L, active6, 0L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, 0L, active4, active5, active6, active7);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7){
   if (((active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, 0L, old4, old5, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, active4, active5, active6, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active2, 0L, active4, 0L, active5, 0L, active6, 0xc00000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa19_0(active2, 0L, active4, 0L, active5, 0x100000L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active2, 0L, active4, 0L, active5, 0L, active6, 0x8000000000000000L);
      case 83:
      case 115:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(18, 138, 52);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 318, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, active4, active5, active6, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2, 0L, old4, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, active5, active6, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active5, 0L, active6, 0xc00000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active5, 0x100000L, active6, 0L);
      case 78:
      case 110:
         if ((active6 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(19, 445);
         break;
      case 89:
      case 121:
         if ((active6 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(19, 447);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, active5, active6, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old5, long active5, long old6, long active6){
   if (((active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, active5, active6, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active5, 0L, active6, 0xc00000000000000L);
      case 82:
      case 114:
         if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(20, 340, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, active5, active6, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old5, long active5, long old6, long active6){
   if (((active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, old5, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active6, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active6, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active6 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 442;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa37_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa38_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa39_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa40_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa41_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa42_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa43_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active6, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjMoveStringLiteralDfa44_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, old6, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active6 & 0x800000000000000L) != 0L)
            return jjStopAtPos(44, 443);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x40220002L, 0xffffffffffffc000L, 0xfffff02fffffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x4a0040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x501f0003ffc3L
};
static final long[] jjbitVec6 = {
   0x0L, 0xbcdf000000000000L, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0x1ffL, 0x787ffffff0000L
};
static final long[] jjbitVec9 = {
   0xffffffff00000000L, 0xfffec3ff000007ffL, 0xffffffffffffffffL, 0x9fffc060002fffffL
};
static final long[] jjbitVec10 = {
   0xfffffffd0000L, 0xffffffffffffe000L, 0x2003fffffffffL, 0x43007ffffffffffL
};
static final long[] jjbitVec11 = {
   0x110043fffffL, 0xffff07ff01ffffffL, 0xffffffff00007effL, 0x3ffL
};
static final long[] jjbitVec12 = {
   0x23fffffffffffff0L, 0xfffeffc3ff010000L, 0x23c5fdfffff99fe1L, 0x1003ffc3b0004000L
};
static final long[] jjbitVec13 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbbfe0L, 0x200ffc300010000L
};
static final long[] jjbitVec14 = {
   0x23edfdfffff99fe0L, 0x2ffc3b0000000L, 0x3ffc718d63dc7e8L, 0xffc000010000L
};
static final long[] jjbitVec15 = {
   0x23fffdfffffddfe0L, 0xffc327000000L, 0x23effdfffffddfe1L, 0x6ffc360000000L
};
static final long[] jjbitVec16 = {
   0x27fffffffffddff0L, 0xfc00ffc380704000L, 0x2ffbfffffc7fffe0L, 0xffc00000007fL
};
static final long[] jjbitVec17 = {
   0xdfffffffffffeL, 0x3ff007fL, 0x200dffaffffff7d6L, 0xf3ff005fL
};
static final long[] jjbitVec18 = {
   0x3ff00000001L, 0x1ffffffffeffL, 0x1f00L, 0x0L
};
static final long[] jjbitVec19 = {
   0x800007ffffffffffL, 0xffe1c0623c3f03ffL, 0xffffffff03ff4003L, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec20 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec21 = {
   0xffffffffff3dffffL, 0x7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x1ffc7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x3ffff8003ffffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x3ff10800000L
};
static final long[] jjbitVec24 = {
   0xffffffff03ff0000L, 0x1ffffffffffffffL, 0xffff05ffffffff9fL, 0x3fffffffffffffL
};
static final long[] jjbitVec25 = {
   0x7fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec26 = {
   0xffffffff007fffffL, 0x1fffffL, 0x8003ff03ffL, 0x0L
};
static final long[] jjbitVec27 = {
   0xfffffffffffe0L, 0x3ff1fe0L, 0xffffc001fffffff8L, 0x3fffffffffL
};
static final long[] jjbitVec28 = {
   0xfffffffffL, 0x3fffffffffffe3ffL, 0xe7ffffffffff01ffL, 0x46fde0000000000L
};
static final long[] jjbitVec29 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec30 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec31 = {
   0x0L, 0x8002000000000000L, 0x1fff0000L, 0x0L
};
static final long[] jjbitVec32 = {
   0xf3ffbd503e2ffc84L, 0xffffffff000043e0L, 0x1ffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xc781fffffffffL
};
static final long[] jjbitVec34 = {
   0xffff20bfffffffffL, 0x80ffffffffffL, 0x7f7f7f7f007fffffL, 0x7f7f7f7fL
};
static final long[] jjbitVec35 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec37 = {
   0xfffeffffffffffe0L, 0xffffffffffffffffL, 0xffffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec39 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x3fffffffffff0000L
};
static final long[] jjbitVec40 = {
   0xfffffff1fffL, 0x80007fffffffffffL, 0xffffffff3fffffffL, 0xffffffffffffL
};
static final long[] jjbitVec41 = {
   0xfffffffcff800000L, 0xffffffffffffffffL, 0xfffffffffffff9ffL, 0xfffc000003eb07ffL
};
static final long[] jjbitVec42 = {
   0x7fffff7bbL, 0xfffffffffffffL, 0xffffffffffffcL, 0x68fc000003ff0000L
};
static final long[] jjbitVec43 = {
   0xffff003fffffffffL, 0x1fffffff0000007fL, 0x7fffffffffff0L, 0x7fffffdf03ff8000L
};
static final long[] jjbitVec44 = {
   0x1ffffffffffL, 0xc47fffff03ff0ff7L, 0x3e62ffffffffffffL, 0x1c07ff38000005L
};
static final long[] jjbitVec45 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x3ff0007ffffffffL
};
static final long[] jjbitVec46 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff000fffffffffL, 0xffffffffffff87fL
};
static final long[] jjbitVec47 = {
   0xffffffffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec48 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec49 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec50 = {
   0x0L, 0xffdf000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec51 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec52 = {
   0x60220002L, 0xffffffffffffc000L, 0xfffff02fffffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec53 = {
   0x0L, 0x0L, 0x4a0240000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec54 = {
   0xffffffffffffffffL, 0xbcdfffffffffffffL, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec55 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffcfbL, 0xffffffffffffffffL
};
static final long[] jjbitVec56 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0xbffffffffffe01ffL, 0x787ffffff00b6L
};
static final long[] jjbitVec57 = {
   0xffffffff17ff003fL, 0xffffc3ffffffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec58 = {
   0xffffffffffff8000L, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0x243fffffffffffffL
};
static final long[] jjbitVec59 = {
   0x3fffffffffffL, 0xffff07ff0fffffffL, 0xffffffffff037effL, 0xffffffffffffffffL
};
static final long[] jjbitVec60 = {
   0xffffffffffffffffL, 0xfffeffcfffffffffL, 0xf3c5fdfffff99fefL, 0x5003ffcfb080799fL
};
static final long[] jjbitVec61 = {
   0xd36dfdfffff987eeL, 0x3fffc05e023987L, 0xf3edfdfffffbbfeeL, 0xfe00ffcf00013bbfL
};
static final long[] jjbitVec62 = {
   0xf3edfdfffff99feeL, 0x2ffcfb0e0399fL, 0xc3ffc718d63dc7ecL, 0xffc000813dc7L
};
static final long[] jjbitVec63 = {
   0xf3fffdfffffddfffL, 0xffcf27603ddfL, 0xf3effdfffffddfefL, 0xeffcf60603ddfL
};
static final long[] jjbitVec64 = {
   0xfffffffffffddfffL, 0xfc00ffcf80f07ddfL, 0x2ffbfffffc7fffeeL, 0xcffc0ff5f847fL
};
static final long[] jjbitVec65 = {
   0x7fffffffffffffeL, 0x3ff7fffL, 0x3fffffaffffff7d6L, 0xf3ff7f5fL
};
static final long[] jjbitVec66 = {
   0xc2a003ff03000001L, 0xfffe1ffffffffeffL, 0x1ffffffffeffffdfL, 0x40L
};
static final long[] jjbitVec67 = {
   0xffffffffffffffffL, 0xffffffffffff03ffL, 0xffffffff3fffffffL, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec68 = {
   0xffffffffff3dffffL, 0xe7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec69 = {
   0x1fffff803fffffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff308fffffL
};
static final long[] jjbitVec70 = {
   0xffffffff03fff800L, 0x1ffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec71 = {
   0xfff0fff7fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec72 = {
   0xffffffff0fffffffL, 0x9fffffff7fffffffL, 0xbfff008003ff03ffL, 0x7fffL
};
static final long[] jjbitVec73 = {
   0xffffffffffffffffL, 0xff80003ff1fffL, 0xffffffffffffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec74 = {
   0xffffffffffffffL, 0x3fffffffffffe3ffL, 0xe7ffffffffff01ffL, 0x7fffffffff70000L
};
static final long[] jjbitVec75 = {
   0x80007c000000f800L, 0x8002ffdf00100001L, 0x1fff0000L, 0x1ffe21fff0000L
};
static final long[] jjbitVec76 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xff81fffffffffL
};
static final long[] jjbitVec77 = {
   0xffff20bfffffffffL, 0x800080ffffffffffL, 0x7f7f7f7f007fffffL, 0xffffffff7f7f7f7fL
};
static final long[] jjbitVec78 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec79 = {
   0xfffffff1fffL, 0xbff0ffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL
};
static final long[] jjbitVec80 = {
   0x10ffffffffffL, 0xfffffffffffffL, 0xffffffffffffffffL, 0xe8ffffff03ff003fL
};
static final long[] jjbitVec81 = {
   0xffff3fffffffffffL, 0x1fffffff000fffffL, 0xffffffffffffffffL, 0x7fffffff03ff8001L
};
static final long[] jjbitVec82 = {
   0x7fffffffffffffL, 0xfc7fffff03ff3fffL, 0xffffffffffffffffL, 0x7cffff38000007L
};
static final long[] jjbitVec83 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x3ff37ffffffffffL
};
static final long[] jjbitVec84 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec85 = {
   0x18ffff0000ffffL, 0xffdf00000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec86 = {
   0x87fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0xe0000001cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 324;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 274:
               case 52:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 187:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 330:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 22:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 136:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 265:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(150); }
                  break;
               case 326:
               case 101:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 5:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 199:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 328:
               case 33:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 144:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 225:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 135:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 20:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 3:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 264:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 69:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 140:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 229:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 211:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 323:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  break;
               case 325:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(300, 301); }
                  else if (curChar == 62)
                  {
                     if (kind > 356)
                        kind = 356;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 355)
                        kind = 355;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(298, 299); }
                  break;
               case 0:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     { jjAddStates(11, 12); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 46)
                     { jjCheckNAdd(36); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(30, 31); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(27, 28); }
                  else if (curChar == 59)
                  {
                     if (kind > 353)
                        kind = 353;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 364)
                        kind = 364;
                     { jjCheckNAddStates(20, 26); }
                  }
                  else if (curChar == 10)
                     { jjAddStates(27, 29); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 18:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 116:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(121, 129); }
                  break;
               case 329:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  break;
               case 138:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 275:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 332:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 23:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 188:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 6:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 260:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(150); }
                  break;
               case 227:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 16:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 119:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  break;
               case 228:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 21:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 327:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  break;
               case 118:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 324:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  else if (curChar == 61)
                  {
                     if (kind > 357)
                        kind = 357;
                  }
                  break;
               case 256:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 117:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 255:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 212:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(247, 246); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(236, 235); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(224, 223); }
                  break;
               case 2:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 19:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 333:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(150); }
                  break;
               case 315:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(317, 318); }
                  else if (curChar == 47)
                  {
                     if (kind > 368)
                        kind = 368;
                     { jjCheckNAdd(49); }
                  }
                  break;
               case 226:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 145:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 139:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 259:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 258:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 254:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 257:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 261:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 331:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  else if (curChar == 61)
                  {
                     if (kind > 354)
                        kind = 354;
                  }
                  break;
               case 25:
                  if (curChar == 59 && kind > 353)
                     kind = 353;
                  break;
               case 26:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 61 && kind > 354)
                     kind = 354;
                  break;
               case 29:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 30:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 61 && kind > 357)
                     kind = 357;
                  break;
               case 35:
                  if (curChar == 46)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 363)
                     kind = 363;
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 363)
                     kind = 363;
                  { jjCheckNAdd(39); }
                  break;
               case 41:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 42:
                  if ((0x3ff000100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 43:
                  if (curChar != 39)
                     break;
                  if (kind > 366)
                     kind = 366;
                  { jjCheckNAddTwoStates(41, 44); }
                  break;
               case 44:
                  if (curChar != 32)
                     break;
                  if (kind > 366)
                     kind = 366;
                  { jjCheckNAddTwoStates(41, 44); }
                  break;
               case 46:
                  if ((0x3ff000100000000L & l) == 0L)
                     break;
                  if (kind > 366)
                     kind = 366;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if (curChar != 45)
                     break;
                  if (kind > 368)
                     kind = 368;
                  { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 368)
                     kind = 368;
                  { jjCheckNAdd(49); }
                  break;
               case 50:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 54:
                  if (curChar == 39)
                     { jjCheckNAddStates(4, 10); }
                  break;
               case 56:
                  if (curChar == 34)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 57:
                  if (curChar == 39)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 59:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 60:
               case 67:
                  if (curChar == 39 && kind > 389)
                     kind = 389;
                  break;
               case 61:
                  if (curChar == 39)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 62:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 66:
                  { jjAddStates(37, 38); }
                  break;
               case 70:
                  if (curChar == 40)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 71:
                  { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
                  if (curChar == 41)
                     { jjCheckNAdd(67); }
                  break;
               case 73:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 75:
                  { jjAddStates(39, 40); }
                  break;
               case 77:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(79, 80); }
                  break;
               case 79:
                  { jjCheckNAddTwoStates(79, 80); }
                  break;
               case 80:
                  if (curChar == 39)
                     { jjCheckNAdd(67); }
                  break;
               case 81:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 82:
                  if (curChar == 56)
                     { jjAddStates(41, 42); }
                  break;
               case 87:
               case 88:
                  if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 89:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 91:
                  if (curChar == 34 && kind > 390)
                     kind = 390;
                  break;
               case 92:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(93, 95); }
                  break;
               case 93:
                  if ((0xffffffefffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(93, 95); }
                  break;
               case 94:
                  if (curChar == 36 && kind > 390)
                     kind = 390;
                  break;
               case 95:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 98:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               case 103:
                  if (curChar == 10)
                     { jjAddStates(27, 29); }
                  break;
               case 104:
                  if (curChar == 10 && kind > 353)
                     kind = 353;
                  break;
               case 105:
                  if (curChar == 10)
                     { jjCheckNAdd(104); }
                  break;
               case 106:
                  if (curChar == 47)
                     { jjCheckNAdd(104); }
                  break;
               case 111:
                  if (curChar == 32)
                     { jjAddStates(45, 46); }
                  break;
               case 121:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(121, 129); }
                  break;
               case 123:
                  if (curChar == 32)
                     { jjAddStates(47, 48); }
                  break;
               case 149:
                  if (curChar == 40)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 151:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 152:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 155:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(49, 52); }
                  break;
               case 156:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(156, 171); }
                  break;
               case 158:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(158, 167); }
                  break;
               case 160:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 180:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 214:
                  if (curChar == 41 && kind > 297)
                     kind = 297;
                  break;
               case 215:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 224:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(224, 223); }
                  break;
               case 236:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(236, 235); }
                  break;
               case 247:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(247, 246); }
                  break;
               case 297:
                  if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 298:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(298, 299); }
                  break;
               case 299:
                  if (curChar == 61 && kind > 355)
                     kind = 355;
                  break;
               case 300:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(300, 301); }
                  break;
               case 301:
                  if (curChar == 62 && kind > 356)
                     kind = 356;
                  break;
               case 302:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 364)
                     kind = 364;
                  { jjCheckNAddStates(20, 26); }
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(303, 35); }
                  break;
               case 304:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(304, 305); }
                  break;
               case 305:
                  if (curChar != 46)
                     break;
                  if (kind > 363)
                     kind = 363;
                  jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 307:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(308); }
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 363)
                     kind = 363;
                  { jjCheckNAdd(308); }
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(309, 310); }
                  break;
               case 311:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(312); }
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 363)
                     kind = 363;
                  { jjCheckNAdd(312); }
                  break;
               case 313:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 364)
                     kind = 364;
                  { jjCheckNAdd(313); }
                  break;
               case 314:
                  if (curChar == 47)
                     { jjAddStates(11, 12); }
                  break;
               case 316:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 317:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 318:
                  if (curChar == 42)
                     { jjCheckNAddStates(55, 57); }
                  break;
               case 319:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(320, 318); }
                  break;
               case 320:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(320, 318); }
                  break;
               case 321:
                  if (curChar == 47 && kind > 369)
                     kind = 369;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 274:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002000L & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                  }
                  break;
               case 187:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                  }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 330:
               case 52:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 22:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 136:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 265:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(58, 59); }
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 326:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  else if (curChar == 93)
                  {
                     if (kind > 390)
                        kind = 390;
                  }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 199:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 328:
               case 34:
                  if (curChar == 124 && kind > 358)
                     kind = 358;
                  break;
               case 144:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(148); }
                  else if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(143); }
                  break;
               case 225:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 135:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 264:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  if ((0x400000004000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  break;
               case 69:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 140:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 229:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 211:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(63, 64); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(65, 66); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(67, 68); }
                  break;
               case 323:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  else if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 64); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddTwoStates(101, 102); }
                  else if (curChar == 96)
                     { jjCheckNAdd(98); }
                  else if (curChar == 124)
                     { jjAddStates(73, 74); }
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 64); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(75, 81); }
                  else if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(86, 90); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(91, 93); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  else if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(96, 98); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(99, 100); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 18:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                  }
                  break;
               case 116:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 329:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  break;
               case 138:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 275:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 332:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  break;
               case 23:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 188:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 6:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 260:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(58, 59); }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 227:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 16:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 119:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 228:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 21:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 327:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 118:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 256:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  break;
               case 117:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 255:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 212:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 246;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 235;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 2:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 19:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 333:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 226:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 145:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 139:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 259:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 258:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 254:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(148); }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(143); }
                  break;
               case 257:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 261:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     { jjCheckNAdd(52); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L && kind > 323)
                     kind = 323;
                  break;
               case 11:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 32:
                  if (curChar == 124)
                     { jjAddStates(73, 74); }
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(101, 102); }
                  break;
               case 40:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(103, 104); }
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 366)
                     kind = 366;
                  { jjCheckNAdd(46); }
                  break;
               case 49:
                  if (kind > 368)
                     kind = 368;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 64); }
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 58:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 63:
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 64:
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(69, 72); }
                  break;
               case 65:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(66, 68); }
                  break;
               case 66:
                  { jjCheckNAddTwoStates(66, 68); }
                  break;
               case 68:
                  if (curChar == 125)
                     { jjCheckNAdd(67); }
                  break;
               case 71:
                  { jjAddStates(105, 106); }
                  break;
               case 74:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 75:
                  { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 76:
                  if (curChar == 93)
                     { jjCheckNAdd(67); }
                  break;
               case 79:
                  { jjAddStates(107, 108); }
                  break;
               case 83:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 90:
                  { jjAddStates(17, 19); }
                  break;
               case 93:
                  { jjAddStates(109, 110); }
                  break;
               case 97:
                  if (curChar == 96)
                     { jjCheckNAdd(98); }
                  break;
               case 98:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if (curChar == 96 && kind > 390)
                     kind = 390;
                  break;
               case 100:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 101:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 102:
                  if (curChar == 93 && kind > 390)
                     kind = 390;
                  break;
               case 107:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 108:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(99, 100); }
                  break;
               case 110:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 112:
                  if ((0x4000000040000L & l) != 0L && kind > 186)
                     kind = 186;
                  break;
               case 113:
               case 124:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 114:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 120:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 127:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 133:
                  if ((0x10000000100L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 134:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 137:
                  if ((0x2000000020L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 141:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(91, 93); }
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 146:
                  if ((0x200000002000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 147:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 153:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 154:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(155); }
                  break;
               case 157:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 159:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L && kind > 362)
                     kind = 362;
                  break;
               case 162:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 166:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 169:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 173:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(155); }
                  break;
               case 175:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 181:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(148); }
                  break;
               case 182:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(86, 90); }
                  break;
               case 184:
                  if ((0x1000000010L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 185:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 189:
                  if ((0x10000000100000L & l) != 0L && kind > 267)
                     kind = 267;
                  break;
               case 190:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x100000001000L & l) != 0L && kind > 267)
                     kind = 267;
                  break;
               case 195:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x4000000040000L & l) != 0L && kind > 323)
                     kind = 323;
                  break;
               case 197:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 200:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x8000000080L & l) != 0L && kind > 323)
                     kind = 323;
                  break;
               case 202:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 210:
                  if ((0x8000000080000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 213:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 297)
                     kind = 297;
                  { jjCheckNAdd(215); }
                  break;
               case 216:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 217:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 230:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(65, 66); }
                  break;
               case 231:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 232:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 297)
                     kind = 297;
                  { jjCheckNAdd(215); }
                  break;
               case 233:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(232); }
                  break;
               case 234:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 237:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 238:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(63, 64); }
                  break;
               case 243:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 244:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(232); }
                  break;
               case 245:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 249:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(75, 81); }
                  break;
               case 262:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 266:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 276:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(148); }
                  break;
               case 278:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 280:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 288:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 306:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(111, 112); }
                  break;
               case 310:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(113, 114); }
                  break;
               case 317:
                  { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 319:
               case 320:
                  { jjCheckNAddTwoStates(320, 318); }
                  break;
               case 322:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(96, 98); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 274:
               case 52:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 187:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 330:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 136:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 265:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 326:
               case 101:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 199:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 144:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 225:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 135:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 20:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 264:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 69:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 140:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 229:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 211:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 323:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 116:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 329:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 138:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 275:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 332:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 188:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 260:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 227:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 16:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 119:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 228:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 327:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 118:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 256:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 117:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 255:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 212:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 19:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 333:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 226:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 145:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 139:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 259:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 258:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 254:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 257:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 261:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  { jjCheckNAdd(52); }
                  break;
               case 49:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 368)
                     kind = 368;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 59:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 38); }
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(105, 106); }
                  break;
               case 75:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(39, 40); }
                  break;
               case 79:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(107, 108); }
                  break;
               case 90:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 19); }
                  break;
               case 93:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(109, 110); }
                  break;
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(43, 44); }
                  break;
               case 317:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 319:
               case 320:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(320, 318); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 324 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\54", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\75\76", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\46\46", "\46\76", 
"\74\46", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\50", "\51", "\75", "\56", "\72", null, null, null, null, null, "\52", 
"\77", "\41", "\53", "\76", "\74", "\52\75", "\75\52", "\100\100", "\176", "\176\52", 
"\41\176", "\41\176\52", "\100\76", "\74\100", "\77\174", "\77\46", "\55", "\55\43", 
"\74\55\76", "\74\43\76", "\72\75", "\174", "\46", "\74\74", "\76\76", "\57", "\45", 
"\136", "\133", "\135", null, "\175", null, null, "\72\72", "\55\76", "\55\76\76", 
"\43\76", "\43\76\76", "\100", null, null, null, null, "\173", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   149, 152, 153, 180, 55, 58, 59, 60, 62, 63, 60, 315, 316, 298, 299, 300, 
   301, 89, 90, 91, 303, 35, 304, 305, 309, 310, 313, 105, 106, 108, 55, 58, 
   59, 60, 62, 63, 60, 66, 68, 75, 76, 54, 64, 98, 99, 111, 114, 123, 
   125, 156, 171, 158, 167, 160, 164, 318, 319, 321, 173, 179, 149, 153, 180, 243, 
   247, 231, 236, 212, 224, 69, 73, 77, 81, 33, 34, 255, 263, 273, 276, 278, 
   286, 296, 210, 229, 241, 252, 188, 193, 195, 200, 208, 145, 147, 182, 136, 141, 
   210, 8, 323, 119, 131, 38, 39, 42, 43, 71, 72, 79, 80, 93, 95, 307, 
   308, 311, 312, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec51[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec86[i2] & l2) != 0L);
      default :
         if ((jjbitVec52[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 389 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        // <S_CHAR_LITERAL> contains the <SPECIAL_ESC> token and always the longest match is returned
        // So when Backslash is explicitly not allowed as an Escape Character and a <S_CHAR_LITERAL> is found
        // which contains the <SPECIAL_ESC>, then we will need to
        // 1) break the <S_CHAR_LITERAL> at <SPECIAL_ESC> close it with a "'"
        // 2) continue tokenizing after that <SPECIAL_ESC> with a new <S_CHAR_LITERAL> or any other Token
        if ( !configuration.getAsBoolean(Feature.allowBackslashEscapeCharacter) && matchedToken.image.contains("\\'") ) {
            matchedToken.image = image.substring( 0, image.indexOf("\\'") + 1 ) + "'";
            for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
              if ( CCJSqlParserConstants.tokenImage[i].equals("<S_CHAR_LITERAL>") ) {
                  matchedToken.kind = i;
              }
            }
            input_stream.backup(image.length() - matchedToken.image.length() );
        } else if ( configuration.getAsBoolean(Feature.allowBackslashEscapeCharacter) && matchedToken.image.contains("\\''") ) {
            matchedToken.image = image.substring( 0, image.lastIndexOf("\\'") + 3);
            for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
                if ( CCJSqlParserConstants.tokenImage[i].equals("<S_CHAR_LITERAL>") ) {
                    matchedToken.kind = i;
                }
            }
            input_stream.backup(image.length() - matchedToken.image.length() );
      }
         break;
      case 390 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
            matchedToken.image = "[";
            for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
                if (CCJSqlParserConstants.tokenImage[i].equals("\"[\"")) {
                    matchedToken.kind = i;
                }
            }
            input_stream.backup(image.length() - 1);
        }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 324; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x45fffffffffffL, 0xffffffffffffffe0L, 0x3L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x3000000000000L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x3000000000000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[324];
    private final int[] jjstateSet = new int[2 * 324];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
